{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","activeStep","setActiveStep","ssid","setSsid","password","setPassword","encryption","setEncryption","hidden","setHidden","data","setData","handleBack","prevActiveStep","handleChange","key","event","target","value","qrcode","hiddenSSID","outputFormat","type","then","Card","sx","minWidth","maxWidth","mx","my","Box","p","Stepper","orientation","Step","StepLabel","optional","StepContent","TextField","mb","label","variant","fullWidth","onChange","FormControl","component","FormLabel","RadioGroup","row","aria-label","name","FormControlLabel","control","Radio","Button","onClick","mt","mr","disabled","href","download","alt","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18e3a043.chunk.js","sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\nimport * as qrcode from \"wifi-qr-code-generator\";\n// import Button from \"@material-ui/core/Button\";\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport StepContent from \"@mui/material/StepContent\";\nimport Button from \"@mui/material/Button\";\n// import Paper from \"@mui/material/Paper\";\n// import Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormLabel from \"@mui/material/FormLabel\";\n\nimport Card from \"@mui/material/Card\";\n\nfunction App() {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [ssid, setSsid] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [encryption, setEncryption] = React.useState(\"WPA\");\n  const [hidden, setHidden] = React.useState(false);\n  const [data, setData] = React.useState(\"\");\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleChange = (key) => (event) => {\n    if (key === \"ssid\") setSsid(event.target.value);\n    if (key === \"password\") setPassword(event.target.value);\n    if (key === \"encryption\") setEncryption(event.target.value);\n    if (key === \"hidden\") setHidden(event.target.value);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  React.useEffect(() => {\n    const pr = qrcode.generateWifiQRCode({\n      ssid: ssid,\n      password: password,\n      encryption: encryption,\n      hiddenSSID: hidden,\n      outputFormat: { type: \"image/png\" },\n    });\n    pr.then((data) => setData(data));\n    return () => {};\n  }, [ssid, password, encryption, hidden]);\n\n  return (\n    <Card sx={{ minWidth: 275, maxWidth: 400, mx: \"auto\", my: 4 }}>\n      <Box sx={{ p: 4 }}>\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\n          <Step>\n            <StepLabel optional={null}>SSID/パスワード入力</StepLabel>\n            <StepContent>\n              <TextField\n                sx={{ mb: 2 }}\n                label=\"WiFi SSID\"\n                variant=\"outlined\"\n                fullWidth\n                value={ssid}\n                onChange={handleChange(\"ssid\")}\n              />\n              <TextField\n                sx={{ mb: 2 }}\n                label=\"WiFi Password\"\n                variant=\"outlined\"\n                fullWidth\n                value={password}\n                onChange={handleChange(\"password\")}\n              />\n              <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">暗号化方式</FormLabel>\n                <RadioGroup\n                  row\n                  aria-label=\"wifi-type\"\n                  name=\"row-radio-buttons-group\"\n                  value={encryption}\n                  onChange={handleChange(\"encryption\")}\n                >\n                  <FormControlLabel\n                    value=\"WPA\"\n                    control={<Radio />}\n                    label=\"WPA / WPA2\"\n                  />\n                  <FormControlLabel\n                    value=\"WEP\"\n                    control={<Radio />}\n                    label=\"WEP\"\n                  />\n                  <FormControlLabel\n                    value=\"None\"\n                    control={<Radio />}\n                    label=\"None\"\n                  />\n                </RadioGroup>\n              </FormControl>\n\n              <Box sx={{ mb: 2 }}>\n                <Button\n                  variant=\"contained\"\n                  onClick={handleNext}\n                  sx={{ mt: 1, mr: 1 }}\n                >\n                  進む\n                </Button>\n                <Button disabled onClick={handleBack} sx={{ mt: 1, mr: 1 }}>\n                  戻る\n                </Button>\n              </Box>\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel optional={null}>QRコードの表示</StepLabel>\n            <StepContent>\n              <a href={data} download={`${ssid}.png`}>\n                <img alt=\"QRcode\" src={data} />\n              </a>\n              <Box sx={{ mb: 2 }}>\n                <Button\n                  variant=\"contained\"\n                  href={data}\n                  download={`${ssid}.png`}\n                  sx={{ mt: 1, mr: 1 }}\n                  fullWidth\n                >\n                  ダウンロードする\n                </Button>\n              </Box>\n\n              <Box sx={{ mb: 2 }}>\n                <Button\n                  variant=\"contained\"\n                  onClick={handleReset}\n                  sx={{ mt: 1, mr: 1 }}\n                >\n                  最初から\n                </Button>\n                <Button onClick={handleBack} sx={{ mt: 1, mr: 1 }}>\n                  戻る\n                </Button>\n              </Box>\n            </StepContent>\n          </Step>\n        </Stepper>\n      </Box>\n    </Card>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}